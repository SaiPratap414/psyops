/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProposeSequencerCanceled = ContractEventLog<{
  proposedSequencer: string;
  currentSequencer: string;
  0: string;
  1: string;
}>;
export type SequencerProposed = ContractEventLog<{
  currentSequencer: string;
  newSequencer: string;
  0: string;
  1: string;
}>;
export type UpdateContractConfig = ContractEventLog<{
  key: string;
  oldValue: string;
  newValue: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateGasConfig = ContractEventLog<{
  key: string;
  oldValue: string;
  newValue: string;
  0: string;
  1: string;
  2: string;
}>;
export type RegisterBeacon = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type Request = ContractEventLog<{
  id: string;
  request: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string
  ];
  0: string;
  1: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string
  ];
}>;
export type SubmitRandom = ContractEventLog<{
  id: string;
  beacon: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type ClientWithdrawTo = ContractEventLog<{
  client: string;
  to: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type DiamondCut = ContractEventLog<{
  _diamondCut: [string, string, string[]][];
  _init: string;
  _calldata: string;
  0: [string, string, string[]][];
  1: string;
  2: string;
}>;
export type BeaconDepositEth = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;
export type ChargeEth = ContractEventLog<{
  from: string;
  to: string;
  amount: string;
  chargeType: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ClientDepositEth = ContractEventLog<{
  account: string;
  amount: string;
  0: string;
  1: string;
}>;
export type RequestBeacon = ContractEventLog<{
  id: string;
  beacon: string;
  seed: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Result = ContractEventLog<{
  id: string;
  result: string;
  0: string;
  1: string;
}>;
export type Retry = ContractEventLog<{
  id: string;
  request: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string
  ];
  chargedBeacon: string;
  renewer: string;
  ethToClient: string;
  ethToRenewer: string;
  0: string;
  1: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string
  ];
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type SetTreasury = ContractEventLog<{
  previousTreasury: string;
  newTreasury: string;
  0: string;
  1: string;
}>;
export type TransferSequencer = ContractEventLog<{
  previousSequencer: string;
  newSequencer: string;
  0: string;
  1: string;
}>;
export type UnregisterBeacon = ContractEventLog<{
  beacon: string;
  kicked: boolean;
  strikes: string;
  0: string;
  1: boolean;
  2: string;
}>;
export type WithdrawEth = ContractEventLog<{
  to: string;
  amount: string;
  0: string;
  1: string;
}>;
export type CallbackFailed = ContractEventLog<{
  client: string;
  id: string;
  result: string;
  txData: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Randomizer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Randomizer;
  clone(): Randomizer;
  methods: {
    acceptSequencer(): NonPayableTransactionObject<void>;

    batchSetConfigUints(
      _keys: (number | string | BN)[],
      _values: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    batchSetGasEstimates(
      _keys: (number | string | BN)[],
      _values: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    cancelProposeSequencer(): NonPayableTransactionObject<void>;

    configUint(key: number | string | BN): NonPayableTransactionObject<string>;

    configUints(): NonPayableTransactionObject<string[]>;

    gasEstimate(key: number | string | BN): NonPayableTransactionObject<string>;

    gasEstimates(): NonPayableTransactionObject<string[]>;

    proposeSequencer(_proposed: string): NonPayableTransactionObject<void>;

    proposedSequencer(): NonPayableTransactionObject<string>;

    sequencer(): NonPayableTransactionObject<string>;

    setConfigUint(
      _key: number | string | BN,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setGasEstimate(
      _key: number | string | BN,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTreasury(_treasury: string): NonPayableTransactionObject<void>;

    treasury(): NonPayableTransactionObject<string>;

    beacon(_beacon: string): NonPayableTransactionObject<{
      publicKey: string[];
      registered: boolean;
      strikes: string;
      consecutiveSubmissions: string;
      pending: string;
      ethStake: string;
      index: string;
      0: string[];
      1: boolean;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    beaconStakeEth(_beacon: string): PayableTransactionObject<void>;

    beaconUnstakeEth(
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    beacons(): NonPayableTransactionObject<string[]>;

    getRequest(_request: number | string | BN): NonPayableTransactionObject<{
      result: string;
      dataHash: string;
      ethPaid: string;
      ethRefunded: string;
      vrfHashes: string[];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string[];
    }>;

    registerBeacon(
      _beacon: string,
      _vrfPublicKeyData: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    "submitRandom(uint256,address[4],uint256[19],bytes32)"(
      beaconPos: number | string | BN,
      _addressData: string[],
      _uintData: (number | string | BN)[],
      seed: string | number[]
    ): NonPayableTransactionObject<void>;

    "submitRandom(uint256,address[4],uint256[19],bytes32[3],uint8)"(
      beaconPos: number | string | BN,
      _addressData: string[],
      _uintData: (number | string | BN)[],
      _rsAndSeed: (string | number[])[],
      _v: number | string | BN
    ): NonPayableTransactionObject<void>;

    unregisterBeacon(_beacon: string): NonPayableTransactionObject<void>;

    clientBalanceOf(_client: string): NonPayableTransactionObject<{
      deposit: string;
      reserved: string;
      0: string;
      1: string;
    }>;

    clientDeposit(_client: string): PayableTransactionObject<void>;

    clientWithdrawTo(
      _to: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    "estimateFee(uint256,uint256)"(
      _callbackGasLimit: number | string | BN,
      _confirmations: number | string | BN
    ): NonPayableTransactionObject<string>;

    "estimateFee(uint256)"(
      _callbackGasLimit: number | string | BN
    ): NonPayableTransactionObject<string>;

    estimateFeeUsingConfirmationsAndGasPrice(
      _callbackGasLimit: number | string | BN,
      _confirmations: number | string | BN,
      _gasPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    estimateFeeUsingGasPrice(
      _callbackGasLimit: number | string | BN,
      _gasPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    "request(uint256,uint256)"(
      _callbackGasLimit: number | string | BN,
      _confirmations: number | string | BN
    ): NonPayableTransactionObject<string>;

    "request(uint256)"(
      _callbackGasLimit: number | string | BN
    ): NonPayableTransactionObject<string>;

    diamondCut(
      _diamondCut: [string, number | string | BN, (string | number[])[]][],
      _init: string,
      _calldata: string | number[]
    ): NonPayableTransactionObject<void>;

    facetAddress(
      _functionSelector: string | number[]
    ): NonPayableTransactionObject<string>;

    facetAddresses(): NonPayableTransactionObject<string[]>;

    facetFunctionSelectors(
      _facet: string
    ): NonPayableTransactionObject<string[]>;

    facets(): NonPayableTransactionObject<[string, string[]][]>;

    supportsInterface(
      _interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    acceptOwnership(): NonPayableTransactionObject<void>;

    cancelProposeOwnership(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    proposeOwnership(_proposedOwner: string): NonPayableTransactionObject<void>;

    proposedOwner(): NonPayableTransactionObject<string>;

    getFeeStats(
      _request: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    renewRequest(
      _addressData: string[],
      _uintData: (number | string | BN)[],
      _seed: string | number[]
    ): NonPayableTransactionObject<void>;

    computeFastVerifyParams(
      _publicKey: (number | string | BN)[],
      _proof: (number | string | BN)[],
      _message: string | number[]
    ): NonPayableTransactionObject<{
      0: string[];
      1: string[];
    }>;

    fastVerify(
      _publicKey: (number | string | BN)[],
      _proof: (number | string | BN)[],
      _message: string | number[],
      _uPoint: (number | string | BN)[],
      _vComponents: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean>;

    gammaToHash(
      _gammaX: number | string | BN,
      _gammaY: number | string | BN
    ): NonPayableTransactionObject<string>;

    verify(
      _publicKey: (number | string | BN)[],
      _proof: (number | string | BN)[],
      _message: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    ProposeSequencerCanceled(
      cb?: Callback<ProposeSequencerCanceled>
    ): EventEmitter;
    ProposeSequencerCanceled(
      options?: EventOptions,
      cb?: Callback<ProposeSequencerCanceled>
    ): EventEmitter;

    SequencerProposed(cb?: Callback<SequencerProposed>): EventEmitter;
    SequencerProposed(
      options?: EventOptions,
      cb?: Callback<SequencerProposed>
    ): EventEmitter;

    UpdateContractConfig(cb?: Callback<UpdateContractConfig>): EventEmitter;
    UpdateContractConfig(
      options?: EventOptions,
      cb?: Callback<UpdateContractConfig>
    ): EventEmitter;

    UpdateGasConfig(cb?: Callback<UpdateGasConfig>): EventEmitter;
    UpdateGasConfig(
      options?: EventOptions,
      cb?: Callback<UpdateGasConfig>
    ): EventEmitter;

    RegisterBeacon(cb?: Callback<RegisterBeacon>): EventEmitter;
    RegisterBeacon(
      options?: EventOptions,
      cb?: Callback<RegisterBeacon>
    ): EventEmitter;

    Request(cb?: Callback<Request>): EventEmitter;
    Request(options?: EventOptions, cb?: Callback<Request>): EventEmitter;

    SubmitRandom(cb?: Callback<SubmitRandom>): EventEmitter;
    SubmitRandom(
      options?: EventOptions,
      cb?: Callback<SubmitRandom>
    ): EventEmitter;

    ClientWithdrawTo(cb?: Callback<ClientWithdrawTo>): EventEmitter;
    ClientWithdrawTo(
      options?: EventOptions,
      cb?: Callback<ClientWithdrawTo>
    ): EventEmitter;

    DiamondCut(cb?: Callback<DiamondCut>): EventEmitter;
    DiamondCut(options?: EventOptions, cb?: Callback<DiamondCut>): EventEmitter;

    BeaconDepositEth(cb?: Callback<BeaconDepositEth>): EventEmitter;
    BeaconDepositEth(
      options?: EventOptions,
      cb?: Callback<BeaconDepositEth>
    ): EventEmitter;

    ChargeEth(cb?: Callback<ChargeEth>): EventEmitter;
    ChargeEth(options?: EventOptions, cb?: Callback<ChargeEth>): EventEmitter;

    ClientDepositEth(cb?: Callback<ClientDepositEth>): EventEmitter;
    ClientDepositEth(
      options?: EventOptions,
      cb?: Callback<ClientDepositEth>
    ): EventEmitter;

    RequestBeacon(cb?: Callback<RequestBeacon>): EventEmitter;
    RequestBeacon(
      options?: EventOptions,
      cb?: Callback<RequestBeacon>
    ): EventEmitter;

    Result(cb?: Callback<Result>): EventEmitter;
    Result(options?: EventOptions, cb?: Callback<Result>): EventEmitter;

    Retry(cb?: Callback<Retry>): EventEmitter;
    Retry(options?: EventOptions, cb?: Callback<Retry>): EventEmitter;

    SetTreasury(cb?: Callback<SetTreasury>): EventEmitter;
    SetTreasury(
      options?: EventOptions,
      cb?: Callback<SetTreasury>
    ): EventEmitter;

    TransferSequencer(cb?: Callback<TransferSequencer>): EventEmitter;
    TransferSequencer(
      options?: EventOptions,
      cb?: Callback<TransferSequencer>
    ): EventEmitter;

    UnregisterBeacon(cb?: Callback<UnregisterBeacon>): EventEmitter;
    UnregisterBeacon(
      options?: EventOptions,
      cb?: Callback<UnregisterBeacon>
    ): EventEmitter;

    WithdrawEth(cb?: Callback<WithdrawEth>): EventEmitter;
    WithdrawEth(
      options?: EventOptions,
      cb?: Callback<WithdrawEth>
    ): EventEmitter;

    CallbackFailed(cb?: Callback<CallbackFailed>): EventEmitter;
    CallbackFailed(
      options?: EventOptions,
      cb?: Callback<CallbackFailed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ProposeSequencerCanceled",
    cb: Callback<ProposeSequencerCanceled>
  ): void;
  once(
    event: "ProposeSequencerCanceled",
    options: EventOptions,
    cb: Callback<ProposeSequencerCanceled>
  ): void;

  once(event: "SequencerProposed", cb: Callback<SequencerProposed>): void;
  once(
    event: "SequencerProposed",
    options: EventOptions,
    cb: Callback<SequencerProposed>
  ): void;

  once(event: "UpdateContractConfig", cb: Callback<UpdateContractConfig>): void;
  once(
    event: "UpdateContractConfig",
    options: EventOptions,
    cb: Callback<UpdateContractConfig>
  ): void;

  once(event: "UpdateGasConfig", cb: Callback<UpdateGasConfig>): void;
  once(
    event: "UpdateGasConfig",
    options: EventOptions,
    cb: Callback<UpdateGasConfig>
  ): void;

  once(event: "RegisterBeacon", cb: Callback<RegisterBeacon>): void;
  once(
    event: "RegisterBeacon",
    options: EventOptions,
    cb: Callback<RegisterBeacon>
  ): void;

  once(event: "Request", cb: Callback<Request>): void;
  once(event: "Request", options: EventOptions, cb: Callback<Request>): void;

  once(event: "SubmitRandom", cb: Callback<SubmitRandom>): void;
  once(
    event: "SubmitRandom",
    options: EventOptions,
    cb: Callback<SubmitRandom>
  ): void;

  once(event: "ClientWithdrawTo", cb: Callback<ClientWithdrawTo>): void;
  once(
    event: "ClientWithdrawTo",
    options: EventOptions,
    cb: Callback<ClientWithdrawTo>
  ): void;

  once(event: "DiamondCut", cb: Callback<DiamondCut>): void;
  once(
    event: "DiamondCut",
    options: EventOptions,
    cb: Callback<DiamondCut>
  ): void;

  once(event: "BeaconDepositEth", cb: Callback<BeaconDepositEth>): void;
  once(
    event: "BeaconDepositEth",
    options: EventOptions,
    cb: Callback<BeaconDepositEth>
  ): void;

  once(event: "ChargeEth", cb: Callback<ChargeEth>): void;
  once(
    event: "ChargeEth",
    options: EventOptions,
    cb: Callback<ChargeEth>
  ): void;

  once(event: "ClientDepositEth", cb: Callback<ClientDepositEth>): void;
  once(
    event: "ClientDepositEth",
    options: EventOptions,
    cb: Callback<ClientDepositEth>
  ): void;

  once(event: "RequestBeacon", cb: Callback<RequestBeacon>): void;
  once(
    event: "RequestBeacon",
    options: EventOptions,
    cb: Callback<RequestBeacon>
  ): void;

  once(event: "Result", cb: Callback<Result>): void;
  once(event: "Result", options: EventOptions, cb: Callback<Result>): void;

  once(event: "Retry", cb: Callback<Retry>): void;
  once(event: "Retry", options: EventOptions, cb: Callback<Retry>): void;

  once(event: "SetTreasury", cb: Callback<SetTreasury>): void;
  once(
    event: "SetTreasury",
    options: EventOptions,
    cb: Callback<SetTreasury>
  ): void;

  once(event: "TransferSequencer", cb: Callback<TransferSequencer>): void;
  once(
    event: "TransferSequencer",
    options: EventOptions,
    cb: Callback<TransferSequencer>
  ): void;

  once(event: "UnregisterBeacon", cb: Callback<UnregisterBeacon>): void;
  once(
    event: "UnregisterBeacon",
    options: EventOptions,
    cb: Callback<UnregisterBeacon>
  ): void;

  once(event: "WithdrawEth", cb: Callback<WithdrawEth>): void;
  once(
    event: "WithdrawEth",
    options: EventOptions,
    cb: Callback<WithdrawEth>
  ): void;

  once(event: "CallbackFailed", cb: Callback<CallbackFailed>): void;
  once(
    event: "CallbackFailed",
    options: EventOptions,
    cb: Callback<CallbackFailed>
  ): void;
}
