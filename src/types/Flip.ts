/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BankRollSet = ContractEventLog<{
  _bankRoller: string;
  owner: string;
  0: string;
  1: string;
}>;
export type BetRequestDenied = ContractEventLog<{
  betRequestDeniedId: string;
  user: string;
  betAmount: string;
  bankRollBalance: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type CallBackGasLimitSet = ContractEventLog<{
  _callBackGasLimit: string;
  owner: string;
  0: string;
  1: string;
}>;
export type EtherDeposited = ContractEventLog<{
  from: string;
  amount: string;
  0: string;
  1: string;
}>;
export type EtherWithdrawn = ContractEventLog<{
  owner: string;
  amount: string;
  0: string;
  1: string;
}>;
export type FlipAmountsSet = ContractEventLog<{
  amount: string[];
  isAccepted: boolean;
  0: string[];
  1: boolean;
}>;
export type FlipRequest = ContractEventLog<{
  requestId: string;
  user: string;
  0: string;
  1: string;
}>;
export type FlipResult = ContractEventLog<{
  user: string;
  id: string;
  seed: string;
  prediction: string;
  result: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type HouseCutSet = ContractEventLog<{
  _houseCut: string;
  owner: string;
  0: string;
  1: string;
}>;
export type LastGameDifferenceInVRFFee = ContractEventLog<{
  user: string;
  vrfDepositedInRandomizer: string;
  vrfConsumedByRandomizer: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  newOwner: string;
  previousOwner: string;
  0: string;
  1: string;
}>;

export interface Flip extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Flip;
  clone(): Flip;
  methods: {
    bankRoll(): NonPayableTransactionObject<string>;

    callbackGasLimit(): NonPayableTransactionObject<string>;

    coinFlipGames(arg0: number | string | BN): NonPayableTransactionObject<{
      betAmount: string;
      vrfFeeSent: string;
      seed: string;
      user: string;
      prediction: string;
      result: string;
      isGameVRFDifferenceWithdrawn: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    flip(
      betAmount: number | string | BN,
      _coinFlipValue: number | string | BN
    ): PayableTransactionObject<void>;

    flipAmounts(
      arg0: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    houseCut(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    randomizer(): NonPayableTransactionObject<string>;

    randomizerCallback(
      _id: number | string | BN,
      _value: string | number[]
    ): NonPayableTransactionObject<void>;

    randomizerWithdraw(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    refundVRFFeeIfAny(
      requestId: number | string | BN
    ): NonPayableTransactionObject<void>;

    setBankRollAddress(_bankRoll: string): NonPayableTransactionObject<void>;

    setCallBackGasLimit(
      _callbackGasLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFlipAmounts(
      amounts: (number | string | BN)[],
      isAccepted: boolean
    ): NonPayableTransactionObject<void>;

    setHouseCutAddress(_houseCut: string): NonPayableTransactionObject<void>;

    transferOwnership(_newOwner: string): NonPayableTransactionObject<void>;

    userToGames(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    withdrawEther(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    BankRollSet(cb?: Callback<BankRollSet>): EventEmitter;
    BankRollSet(
      options?: EventOptions,
      cb?: Callback<BankRollSet>
    ): EventEmitter;

    BetRequestDenied(cb?: Callback<BetRequestDenied>): EventEmitter;
    BetRequestDenied(
      options?: EventOptions,
      cb?: Callback<BetRequestDenied>
    ): EventEmitter;

    CallBackGasLimitSet(cb?: Callback<CallBackGasLimitSet>): EventEmitter;
    CallBackGasLimitSet(
      options?: EventOptions,
      cb?: Callback<CallBackGasLimitSet>
    ): EventEmitter;

    EtherDeposited(cb?: Callback<EtherDeposited>): EventEmitter;
    EtherDeposited(
      options?: EventOptions,
      cb?: Callback<EtherDeposited>
    ): EventEmitter;

    EtherWithdrawn(cb?: Callback<EtherWithdrawn>): EventEmitter;
    EtherWithdrawn(
      options?: EventOptions,
      cb?: Callback<EtherWithdrawn>
    ): EventEmitter;

    FlipAmountsSet(cb?: Callback<FlipAmountsSet>): EventEmitter;
    FlipAmountsSet(
      options?: EventOptions,
      cb?: Callback<FlipAmountsSet>
    ): EventEmitter;

    FlipRequest(cb?: Callback<FlipRequest>): EventEmitter;
    FlipRequest(
      options?: EventOptions,
      cb?: Callback<FlipRequest>
    ): EventEmitter;

    FlipResult(cb?: Callback<FlipResult>): EventEmitter;
    FlipResult(options?: EventOptions, cb?: Callback<FlipResult>): EventEmitter;

    HouseCutSet(cb?: Callback<HouseCutSet>): EventEmitter;
    HouseCutSet(
      options?: EventOptions,
      cb?: Callback<HouseCutSet>
    ): EventEmitter;

    LastGameDifferenceInVRFFee(
      cb?: Callback<LastGameDifferenceInVRFFee>
    ): EventEmitter;
    LastGameDifferenceInVRFFee(
      options?: EventOptions,
      cb?: Callback<LastGameDifferenceInVRFFee>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BankRollSet", cb: Callback<BankRollSet>): void;
  once(
    event: "BankRollSet",
    options: EventOptions,
    cb: Callback<BankRollSet>
  ): void;

  once(event: "BetRequestDenied", cb: Callback<BetRequestDenied>): void;
  once(
    event: "BetRequestDenied",
    options: EventOptions,
    cb: Callback<BetRequestDenied>
  ): void;

  once(event: "CallBackGasLimitSet", cb: Callback<CallBackGasLimitSet>): void;
  once(
    event: "CallBackGasLimitSet",
    options: EventOptions,
    cb: Callback<CallBackGasLimitSet>
  ): void;

  once(event: "EtherDeposited", cb: Callback<EtherDeposited>): void;
  once(
    event: "EtherDeposited",
    options: EventOptions,
    cb: Callback<EtherDeposited>
  ): void;

  once(event: "EtherWithdrawn", cb: Callback<EtherWithdrawn>): void;
  once(
    event: "EtherWithdrawn",
    options: EventOptions,
    cb: Callback<EtherWithdrawn>
  ): void;

  once(event: "FlipAmountsSet", cb: Callback<FlipAmountsSet>): void;
  once(
    event: "FlipAmountsSet",
    options: EventOptions,
    cb: Callback<FlipAmountsSet>
  ): void;

  once(event: "FlipRequest", cb: Callback<FlipRequest>): void;
  once(
    event: "FlipRequest",
    options: EventOptions,
    cb: Callback<FlipRequest>
  ): void;

  once(event: "FlipResult", cb: Callback<FlipResult>): void;
  once(
    event: "FlipResult",
    options: EventOptions,
    cb: Callback<FlipResult>
  ): void;

  once(event: "HouseCutSet", cb: Callback<HouseCutSet>): void;
  once(
    event: "HouseCutSet",
    options: EventOptions,
    cb: Callback<HouseCutSet>
  ): void;

  once(
    event: "LastGameDifferenceInVRFFee",
    cb: Callback<LastGameDifferenceInVRFFee>
  ): void;
  once(
    event: "LastGameDifferenceInVRFFee",
    options: EventOptions,
    cb: Callback<LastGameDifferenceInVRFFee>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
